Sklonuj repozytorium rebase_interactive_workshop z Githuba.

git clone git@github.com:grazin/rebase_interactive_workshop.git

Pracujesz nad projektem razem z zespo³em. Postanowiliœcie udoskonaliæ strategiê branching/merging i stosowaæ rebase interaktywny, ¿eby ka¿dy feature merd¿owany do mastera mia³ tylko jeden komit.

Zaczynasz now¹ funkcjonalnoœæ, opisan¹ w Jirze w tasku ISSUE-13.
Aby rozpocz¹æ pracê, upewnij siê, ¿e masz najnowsz¹ wersjê brancza master, a nastêpnie odbranczuj siê z niego z unikaln¹ nazw¹ brancza np. ISSUE-13-[your-github-username].

git checkout master
git pull
git checkout -b ISSUE-13-[your-github-username]

Dodaj jeden plik i zakomituj zmiany.
Dopisz linijkê na koñcu jednego z istniej¹cych ju¿ plików i zakomituj zmiany.
Wypuszuj wszystko do origina.

Aktualnie masz na swoim branczu 2 komity. Musisz je z³¹czyæ w jeden. U¿yj polecenia rebase interactive, ¿eby to osi¹gn¹æ.
W pierwszym kroku sprawdŸ ile masz komitów na swoim branczu (czasami praca nad ficzerem trwa kilka dni i ³atwo zapomnieæ ile ich siê zrobi³o).

git log master..ISSUE-13-[your-github-username]

Po upewnieniu siê, ¿e s¹ 2 komity, wejdŸ w tryb interaktywnego ribejza.

git rebase -i HEAD~2

WejdŸ w tryb Insert (i lub insert) i przy pierwszym komicie zostaw pick a przy drugim wstaw f (fixup) lub s (squash):

pick 3ac1c09 komit #1
f 50e26c3 komit #2

Aby kontuowaæ wciœnij Escape a nastêpnie Shift+z+z lub :wq

Teraz ponownie sprawdŸ log

git log master..ISSUE-13-[your-github-username]

Powinien teraz byæ jeden komit.
Wypuszuj teraz swoje zmiany w takiej formie. Musisz ponownie dodaæ parametr --force lub + przed nazw¹ brancza, poniewa¿ zmieni³eœ jego historiê:

git push origin +ISSUE-13-[your-github-username]

